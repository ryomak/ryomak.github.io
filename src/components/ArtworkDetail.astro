---
import type { Data } from '../art/data/data'
import { readFile } from '../utils/file-reader';
import { getArtWasmName } from '../art/data/data'

interface Props {
	art: Data;
}

const { art } = Astro.props;
if (!art) {
	throw new Error('Art is not defined');
}

const rawCode = await readFile(art.language, art.name);
const wasmFilePath = `/wasm/${art.language}_${art.name}.wasm`

---

<div class="artwork-detail">

    <div class="artwork-container">
		<div>
        	<div class="canvas-container">
        	    <main id="canvas-detail"></main>
        	</div>
        	<div class="generate-button-container">
        	    <button id="generate-button">生成</button>
        	</div>
        </div>
        <div>
            <div class="go-code">
                <pre><code>{rawCode}</code></pre>
            </div>
        </div>
    </div>
</div>

<script define:vars={{ wasmFilePath }}>
	async function initWasm() {
		if (typeof Go !== 'undefined') {
			const go = new Go();
			const result = await WebAssembly.instantiateStreaming(fetch(wasmFilePath), go.importObject);
			await go.run(result.instance);
		} else {
			console.error('Go is not defined. Make sure wasm_exec.js is loaded correctly.');
		}
	}
	initWasm();
</script>

<script define:vars={{ art, artParamName: getArtWasmName(art) }}>

	const init = async () => {
		const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

		// GoのLoadをまつ
		await sleep(2000)
		a = eval(artParamName);

		const generateButton = document.getElementById('generate-button');

		generateButton.addEventListener('click', ()=>{
			const canvasId = `#canvas-detail`;
			a.generate(canvasId);
		});

		generateButton.click();
	};

	// https://developer.mozilla.org/ja/docs/Web/API/Document/DOMContentLoaded_event#%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%8C%E5%AE%8C%E4%BA%86%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF
	if (document.readyState === "loading") {
		// Loading hasn't finished yet
		document.addEventListener("DOMContentLoaded", init);
	} else {
		// `DOMContentLoaded` has already fired
		init();
	}


</script>

<style>


    body {
        background-color: var(--art-bg-color);
        color: var(--art-text-color);
        font-family: 'Roboto', sans-serif;
    }


    .artwork-detail {

        --art-primary-color: #00cc99;
        --art-secondary-color: #ff00ff;
        --art-bg-color: #0a0a0a;
        --art-text-color: #ffffff;

        width: 95%;
        margin: 12px auto;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
		gap: 1em;
        background: rgba(24, 24, 24, 0.9);
        border-radius: 20px;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
        backdrop-filter: blur(15px);
    }

    .artwork-container {
        display: flex;
        flex-direction: column;
		justify-content: space-around;
		padding: 24px;
		box-sizing: border-box;
        gap: 2rem;
		overflow: hidden;
    }

    .canvas-container {
        position: relative;
        min-width: fit-content;
        overflow: hidden;
        border-radius: 15px;
        box-shadow: 0 0 40px rgba(0, 255, 255, 0.4);
        padding: 1rem;
    }

    #canvas-detail {
        width: 100%;
		display: flex;
		justify-content: center;
		align-items: center;
        border-radius: 15px;
        margin: auto;
    }

    .artwork-canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .generate-button-container {
        text-align: center;
        margin-top: 1rem;
    }

    #generate-button {
        padding: 0.8rem 2rem;
        background-color: rgba(0, 255, 255, 0.3);
        color: var(--art-primary-color);
        border: 2px solid var(--art-primary-color);
        border-radius: 30px;
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    #generate-button:hover {
        background-color: var(--art-primary-color);
        color: var(--art-bg-color);
        box-shadow: 0 0 20px var(--art-primary-color);
    }

    .go-code {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1.5rem;
        overflow-x: auto;
        border: 1px solid var(--art-primary-color);
    }
	.go-code::-webkit-scrollbar {
        display: none;
    }

    .go-code pre {
        margin: 0;
    }

    .go-code code {
        color: var(--art-primary-color);
        font-family: 'Courier New', monospace;
        font-size: 1rem;
    }

    .artwork-info {
        text-align: center;
        padding: 24px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
		box-sizing: border-box;
        box-shadow: 0 0 30px rgba(255, 0, 255, 0.3);
    }

    .artwork-info h1 {
        font-size: 30px;
        color: var(--art-primary-color);
        text-shadow: 0 0 15px var(--art-primary-color);
    }

    .artwork-info p {
        font-size: 20px;
        color: var(--art-text-color);
        max-width: 800px;
        margin: 0 auto;
        line-height: 1.8;
    }

    @media (min-width: 768px) {
        .artwork-container {
            flex-direction: row;
			flex-wrap: wrap;
        }

		.artwork-detail {
			padding: 24px;
			margin: 0 auto;
        }

        .canvas-container {
            flex: 1;
        }

        .go-code {
            flex: 1;
            max-height: 400px;
            max-width: 500px;
        }
    }

    @keyframes glow {
        0% {
            box-shadow: 0 0 30px var(--art-primary-color);
        }
        50% {
            box-shadow: 0 0 40px var(--art-secondary-color);
        }
        100% {
            box-shadow: 0 0 30px var(--art-primary-color);
        }
    }

    .artwork-detail {
        animation: glow 5s infinite alternate;
    }
</style>